// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CalcWindPoints

#include "Indexing.cginc"

struct OutPoint
{
    float3 pos;
    float3 wind;
    int depth;
    int priority;
    int mode;
    float3 pad0; //https://developer.nvidia.com/content/understanding-structured-buffer-performance)
    float4 pad1; 
};

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<OutPoint> Result;
float3 startPos; //least wind point position in the wind area. other points are calculated relative to this
float3 fwd, up, right; //forward, up, and right vectors of the wind area
int3 numPoints; //(x, y, z) number of wind points
float3 wind; //wind direction of the wind area (same for all points)

[numthreads(4, 4, 4)]
void CalcWindPoints (uint3 id : SV_DispatchThreadID)
{
    OutPoint outPoint;
    outPoint.pos = float3(startPos + (id.x * right) + (id.y * up) + (id.z * fwd));
    outPoint.wind = wind;
    outPoint.depth = 0;
    outPoint.priority = 0;
    outPoint.mode = 0;
    outPoint.pad0 = float3(0, 0, 0);
    outPoint.pad1 = float4(0, 0, 0, 0);

    Result[Index(id.x, id.y, id.z, numPoints.x, numPoints.y)] = outPoint;
}
